// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pipeline.proto

#ifndef PROTOBUF_pipeline_2eproto__INCLUDED
#define PROTOBUF_pipeline_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_pipeline_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsGenericQImpl();
void InitDefaultsGenericQ();
void InitDefaultsQueueInfoQImpl();
void InitDefaultsQueueInfoQ();
void InitDefaultsPipelinesInfoImpl();
void InitDefaultsPipelinesInfo();
void InitDefaultsPipelineImpl();
void InitDefaultsPipeline();
void InitDefaultsElementImpl();
void InitDefaultsElement();
void InitDefaultsQueueInfoImpl();
void InitDefaultsQueueInfo();
inline void InitDefaults() {
  InitDefaultsGenericQ();
  InitDefaultsQueueInfoQ();
  InitDefaultsPipelinesInfo();
  InitDefaultsPipeline();
  InitDefaultsElement();
  InitDefaultsQueueInfo();
}
}  // namespace protobuf_pipeline_2eproto
namespace Lmm {
class Element;
class ElementDefaultTypeInternal;
extern ElementDefaultTypeInternal _Element_default_instance_;
class GenericQ;
class GenericQDefaultTypeInternal;
extern GenericQDefaultTypeInternal _GenericQ_default_instance_;
class Pipeline;
class PipelineDefaultTypeInternal;
extern PipelineDefaultTypeInternal _Pipeline_default_instance_;
class PipelinesInfo;
class PipelinesInfoDefaultTypeInternal;
extern PipelinesInfoDefaultTypeInternal _PipelinesInfo_default_instance_;
class QueueInfo;
class QueueInfoDefaultTypeInternal;
extern QueueInfoDefaultTypeInternal _QueueInfo_default_instance_;
class QueueInfoQ;
class QueueInfoQDefaultTypeInternal;
extern QueueInfoQDefaultTypeInternal _QueueInfoQ_default_instance_;
}  // namespace Lmm
namespace Lmm {

enum QueueInfo_RateLimit {
  QueueInfo_RateLimit_NONE = 0,
  QueueInfo_RateLimit_INTERVAL = 1,
  QueueInfo_RateLimit_BUFFER_COUNT = 2,
  QueueInfo_RateLimit_TOTAL_SIZE = 3,
  QueueInfo_RateLimit_QueueInfo_RateLimit_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  QueueInfo_RateLimit_QueueInfo_RateLimit_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool QueueInfo_RateLimit_IsValid(int value);
const QueueInfo_RateLimit QueueInfo_RateLimit_RateLimit_MIN = QueueInfo_RateLimit_NONE;
const QueueInfo_RateLimit QueueInfo_RateLimit_RateLimit_MAX = QueueInfo_RateLimit_TOTAL_SIZE;
const int QueueInfo_RateLimit_RateLimit_ARRAYSIZE = QueueInfo_RateLimit_RateLimit_MAX + 1;

const ::google::protobuf::EnumDescriptor* QueueInfo_RateLimit_descriptor();
inline const ::std::string& QueueInfo_RateLimit_Name(QueueInfo_RateLimit value) {
  return ::google::protobuf::internal::NameOfEnum(
    QueueInfo_RateLimit_descriptor(), value);
}
inline bool QueueInfo_RateLimit_Parse(
    const ::std::string& name, QueueInfo_RateLimit* value) {
  return ::google::protobuf::internal::ParseNamedEnum<QueueInfo_RateLimit>(
    QueueInfo_RateLimit_descriptor(), name, value);
}
// ===================================================================

class GenericQ : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Lmm.GenericQ) */ {
 public:
  GenericQ();
  virtual ~GenericQ();

  GenericQ(const GenericQ& from);

  inline GenericQ& operator=(const GenericQ& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GenericQ(GenericQ&& from) noexcept
    : GenericQ() {
    *this = ::std::move(from);
  }

  inline GenericQ& operator=(GenericQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GenericQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GenericQ* internal_default_instance() {
    return reinterpret_cast<const GenericQ*>(
               &_GenericQ_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(GenericQ* other);
  friend void swap(GenericQ& a, GenericQ& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GenericQ* New() const PROTOBUF_FINAL { return New(NULL); }

  GenericQ* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GenericQ& from);
  void MergeFrom(const GenericQ& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GenericQ* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 dummy = 1;
  void clear_dummy();
  static const int kDummyFieldNumber = 1;
  ::google::protobuf::int32 dummy() const;
  void set_dummy(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Lmm.GenericQ)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 dummy_;
  mutable int _cached_size_;
  friend struct ::protobuf_pipeline_2eproto::TableStruct;
  friend void ::protobuf_pipeline_2eproto::InitDefaultsGenericQImpl();
};
// -------------------------------------------------------------------

class QueueInfoQ : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Lmm.QueueInfoQ) */ {
 public:
  QueueInfoQ();
  virtual ~QueueInfoQ();

  QueueInfoQ(const QueueInfoQ& from);

  inline QueueInfoQ& operator=(const QueueInfoQ& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueueInfoQ(QueueInfoQ&& from) noexcept
    : QueueInfoQ() {
    *this = ::std::move(from);
  }

  inline QueueInfoQ& operator=(QueueInfoQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueueInfoQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueueInfoQ* internal_default_instance() {
    return reinterpret_cast<const QueueInfoQ*>(
               &_QueueInfoQ_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(QueueInfoQ* other);
  friend void swap(QueueInfoQ& a, QueueInfoQ& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueueInfoQ* New() const PROTOBUF_FINAL { return New(NULL); }

  QueueInfoQ* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QueueInfoQ& from);
  void MergeFrom(const QueueInfoQ& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QueueInfoQ* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 pipeline = 1;
  void clear_pipeline();
  static const int kPipelineFieldNumber = 1;
  ::google::protobuf::int32 pipeline() const;
  void set_pipeline(::google::protobuf::int32 value);

  // int32 element = 2;
  void clear_element();
  static const int kElementFieldNumber = 2;
  ::google::protobuf::int32 element() const;
  void set_element(::google::protobuf::int32 value);

  // int32 outqi = 3;
  void clear_outqi();
  static const int kOutqiFieldNumber = 3;
  ::google::protobuf::int32 outqi() const;
  void set_outqi(::google::protobuf::int32 value);

  // int32 inqi = 4;
  void clear_inqi();
  static const int kInqiFieldNumber = 4;
  ::google::protobuf::int32 inqi() const;
  void set_inqi(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Lmm.QueueInfoQ)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 pipeline_;
  ::google::protobuf::int32 element_;
  ::google::protobuf::int32 outqi_;
  ::google::protobuf::int32 inqi_;
  mutable int _cached_size_;
  friend struct ::protobuf_pipeline_2eproto::TableStruct;
  friend void ::protobuf_pipeline_2eproto::InitDefaultsQueueInfoQImpl();
};
// -------------------------------------------------------------------

class PipelinesInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Lmm.PipelinesInfo) */ {
 public:
  PipelinesInfo();
  virtual ~PipelinesInfo();

  PipelinesInfo(const PipelinesInfo& from);

  inline PipelinesInfo& operator=(const PipelinesInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PipelinesInfo(PipelinesInfo&& from) noexcept
    : PipelinesInfo() {
    *this = ::std::move(from);
  }

  inline PipelinesInfo& operator=(PipelinesInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PipelinesInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PipelinesInfo* internal_default_instance() {
    return reinterpret_cast<const PipelinesInfo*>(
               &_PipelinesInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(PipelinesInfo* other);
  friend void swap(PipelinesInfo& a, PipelinesInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PipelinesInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  PipelinesInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PipelinesInfo& from);
  void MergeFrom(const PipelinesInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PipelinesInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Lmm.Pipeline pipelines = 1;
  int pipelines_size() const;
  void clear_pipelines();
  static const int kPipelinesFieldNumber = 1;
  const ::Lmm::Pipeline& pipelines(int index) const;
  ::Lmm::Pipeline* mutable_pipelines(int index);
  ::Lmm::Pipeline* add_pipelines();
  ::google::protobuf::RepeatedPtrField< ::Lmm::Pipeline >*
      mutable_pipelines();
  const ::google::protobuf::RepeatedPtrField< ::Lmm::Pipeline >&
      pipelines() const;

  // @@protoc_insertion_point(class_scope:Lmm.PipelinesInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Lmm::Pipeline > pipelines_;
  mutable int _cached_size_;
  friend struct ::protobuf_pipeline_2eproto::TableStruct;
  friend void ::protobuf_pipeline_2eproto::InitDefaultsPipelinesInfoImpl();
};
// -------------------------------------------------------------------

class Pipeline : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Lmm.Pipeline) */ {
 public:
  Pipeline();
  virtual ~Pipeline();

  Pipeline(const Pipeline& from);

  inline Pipeline& operator=(const Pipeline& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Pipeline(Pipeline&& from) noexcept
    : Pipeline() {
    *this = ::std::move(from);
  }

  inline Pipeline& operator=(Pipeline&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Pipeline& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pipeline* internal_default_instance() {
    return reinterpret_cast<const Pipeline*>(
               &_Pipeline_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Pipeline* other);
  friend void swap(Pipeline& a, Pipeline& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Pipeline* New() const PROTOBUF_FINAL { return New(NULL); }

  Pipeline* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Pipeline& from);
  void MergeFrom(const Pipeline& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Pipeline* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Lmm.Element elements = 2;
  int elements_size() const;
  void clear_elements();
  static const int kElementsFieldNumber = 2;
  const ::Lmm::Element& elements(int index) const;
  ::Lmm::Element* mutable_elements(int index);
  ::Lmm::Element* add_elements();
  ::google::protobuf::RepeatedPtrField< ::Lmm::Element >*
      mutable_elements();
  const ::google::protobuf::RepeatedPtrField< ::Lmm::Element >&
      elements() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:Lmm.Pipeline)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Lmm::Element > elements_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct ::protobuf_pipeline_2eproto::TableStruct;
  friend void ::protobuf_pipeline_2eproto::InitDefaultsPipelineImpl();
};
// -------------------------------------------------------------------

class Element : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Lmm.Element) */ {
 public:
  Element();
  virtual ~Element();

  Element(const Element& from);

  inline Element& operator=(const Element& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Element(Element&& from) noexcept
    : Element() {
    *this = ::std::move(from);
  }

  inline Element& operator=(Element&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Element& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Element* internal_default_instance() {
    return reinterpret_cast<const Element*>(
               &_Element_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Element* other);
  friend void swap(Element& a, Element& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Element* New() const PROTOBUF_FINAL { return New(NULL); }

  Element* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Element& from);
  void MergeFrom(const Element& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Element* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Lmm.QueueInfo outq = 2;
  int outq_size() const;
  void clear_outq();
  static const int kOutqFieldNumber = 2;
  const ::Lmm::QueueInfo& outq(int index) const;
  ::Lmm::QueueInfo* mutable_outq(int index);
  ::Lmm::QueueInfo* add_outq();
  ::google::protobuf::RepeatedPtrField< ::Lmm::QueueInfo >*
      mutable_outq();
  const ::google::protobuf::RepeatedPtrField< ::Lmm::QueueInfo >&
      outq() const;

  // repeated .Lmm.QueueInfo inq = 3;
  int inq_size() const;
  void clear_inq();
  static const int kInqFieldNumber = 3;
  const ::Lmm::QueueInfo& inq(int index) const;
  ::Lmm::QueueInfo* mutable_inq(int index);
  ::Lmm::QueueInfo* add_inq();
  ::google::protobuf::RepeatedPtrField< ::Lmm::QueueInfo >*
      mutable_inq();
  const ::google::protobuf::RepeatedPtrField< ::Lmm::QueueInfo >&
      inq() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:Lmm.Element)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Lmm::QueueInfo > outq_;
  ::google::protobuf::RepeatedPtrField< ::Lmm::QueueInfo > inq_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct ::protobuf_pipeline_2eproto::TableStruct;
  friend void ::protobuf_pipeline_2eproto::InitDefaultsElementImpl();
};
// -------------------------------------------------------------------

class QueueInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Lmm.QueueInfo) */ {
 public:
  QueueInfo();
  virtual ~QueueInfo();

  QueueInfo(const QueueInfo& from);

  inline QueueInfo& operator=(const QueueInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueueInfo(QueueInfo&& from) noexcept
    : QueueInfo() {
    *this = ::std::move(from);
  }

  inline QueueInfo& operator=(QueueInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueueInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueueInfo* internal_default_instance() {
    return reinterpret_cast<const QueueInfo*>(
               &_QueueInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(QueueInfo* other);
  friend void swap(QueueInfo& a, QueueInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueueInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  QueueInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QueueInfo& from);
  void MergeFrom(const QueueInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QueueInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef QueueInfo_RateLimit RateLimit;
  static const RateLimit NONE =
    QueueInfo_RateLimit_NONE;
  static const RateLimit INTERVAL =
    QueueInfo_RateLimit_INTERVAL;
  static const RateLimit BUFFER_COUNT =
    QueueInfo_RateLimit_BUFFER_COUNT;
  static const RateLimit TOTAL_SIZE =
    QueueInfo_RateLimit_TOTAL_SIZE;
  static inline bool RateLimit_IsValid(int value) {
    return QueueInfo_RateLimit_IsValid(value);
  }
  static const RateLimit RateLimit_MIN =
    QueueInfo_RateLimit_RateLimit_MIN;
  static const RateLimit RateLimit_MAX =
    QueueInfo_RateLimit_RateLimit_MAX;
  static const int RateLimit_ARRAYSIZE =
    QueueInfo_RateLimit_RateLimit_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RateLimit_descriptor() {
    return QueueInfo_RateLimit_descriptor();
  }
  static inline const ::std::string& RateLimit_Name(RateLimit value) {
    return QueueInfo_RateLimit_Name(value);
  }
  static inline bool RateLimit_Parse(const ::std::string& name,
      RateLimit* value) {
    return QueueInfo_RateLimit_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // int32 bufferCount = 1;
  void clear_buffercount();
  static const int kBufferCountFieldNumber = 1;
  ::google::protobuf::int32 buffercount() const;
  void set_buffercount(::google::protobuf::int32 value);

  // float fps = 2;
  void clear_fps();
  static const int kFpsFieldNumber = 2;
  float fps() const;
  void set_fps(float value);

  // int64 elapsedSinceLastAdd = 3;
  void clear_elapsedsincelastadd();
  static const int kElapsedSinceLastAddFieldNumber = 3;
  ::google::protobuf::int64 elapsedsincelastadd() const;
  void set_elapsedsincelastadd(::google::protobuf::int64 value);

  // int32 receivedCount = 4;
  void clear_receivedcount();
  static const int kReceivedCountFieldNumber = 4;
  ::google::protobuf::int32 receivedcount() const;
  void set_receivedcount(::google::protobuf::int32 value);

  // int32 sentCount = 5;
  void clear_sentcount();
  static const int kSentCountFieldNumber = 5;
  ::google::protobuf::int32 sentcount() const;
  void set_sentcount(::google::protobuf::int32 value);

  // int64 totalSize = 6;
  void clear_totalsize();
  static const int kTotalSizeFieldNumber = 6;
  ::google::protobuf::int64 totalsize() const;
  void set_totalsize(::google::protobuf::int64 value);

  // int32 bitrate = 7;
  void clear_bitrate();
  static const int kBitrateFieldNumber = 7;
  ::google::protobuf::int32 bitrate() const;
  void set_bitrate(::google::protobuf::int32 value);

  // .Lmm.QueueInfo.RateLimit rateLimit = 8;
  void clear_ratelimit();
  static const int kRateLimitFieldNumber = 8;
  ::Lmm::QueueInfo_RateLimit ratelimit() const;
  void set_ratelimit(::Lmm::QueueInfo_RateLimit value);

  // @@protoc_insertion_point(class_scope:Lmm.QueueInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 buffercount_;
  float fps_;
  ::google::protobuf::int64 elapsedsincelastadd_;
  ::google::protobuf::int32 receivedcount_;
  ::google::protobuf::int32 sentcount_;
  ::google::protobuf::int64 totalsize_;
  ::google::protobuf::int32 bitrate_;
  int ratelimit_;
  mutable int _cached_size_;
  friend struct ::protobuf_pipeline_2eproto::TableStruct;
  friend void ::protobuf_pipeline_2eproto::InitDefaultsQueueInfoImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GenericQ

// int32 dummy = 1;
inline void GenericQ::clear_dummy() {
  dummy_ = 0;
}
inline ::google::protobuf::int32 GenericQ::dummy() const {
  // @@protoc_insertion_point(field_get:Lmm.GenericQ.dummy)
  return dummy_;
}
inline void GenericQ::set_dummy(::google::protobuf::int32 value) {
  
  dummy_ = value;
  // @@protoc_insertion_point(field_set:Lmm.GenericQ.dummy)
}

// -------------------------------------------------------------------

// QueueInfoQ

// int32 pipeline = 1;
inline void QueueInfoQ::clear_pipeline() {
  pipeline_ = 0;
}
inline ::google::protobuf::int32 QueueInfoQ::pipeline() const {
  // @@protoc_insertion_point(field_get:Lmm.QueueInfoQ.pipeline)
  return pipeline_;
}
inline void QueueInfoQ::set_pipeline(::google::protobuf::int32 value) {
  
  pipeline_ = value;
  // @@protoc_insertion_point(field_set:Lmm.QueueInfoQ.pipeline)
}

// int32 element = 2;
inline void QueueInfoQ::clear_element() {
  element_ = 0;
}
inline ::google::protobuf::int32 QueueInfoQ::element() const {
  // @@protoc_insertion_point(field_get:Lmm.QueueInfoQ.element)
  return element_;
}
inline void QueueInfoQ::set_element(::google::protobuf::int32 value) {
  
  element_ = value;
  // @@protoc_insertion_point(field_set:Lmm.QueueInfoQ.element)
}

// int32 outqi = 3;
inline void QueueInfoQ::clear_outqi() {
  outqi_ = 0;
}
inline ::google::protobuf::int32 QueueInfoQ::outqi() const {
  // @@protoc_insertion_point(field_get:Lmm.QueueInfoQ.outqi)
  return outqi_;
}
inline void QueueInfoQ::set_outqi(::google::protobuf::int32 value) {
  
  outqi_ = value;
  // @@protoc_insertion_point(field_set:Lmm.QueueInfoQ.outqi)
}

// int32 inqi = 4;
inline void QueueInfoQ::clear_inqi() {
  inqi_ = 0;
}
inline ::google::protobuf::int32 QueueInfoQ::inqi() const {
  // @@protoc_insertion_point(field_get:Lmm.QueueInfoQ.inqi)
  return inqi_;
}
inline void QueueInfoQ::set_inqi(::google::protobuf::int32 value) {
  
  inqi_ = value;
  // @@protoc_insertion_point(field_set:Lmm.QueueInfoQ.inqi)
}

// -------------------------------------------------------------------

// PipelinesInfo

// repeated .Lmm.Pipeline pipelines = 1;
inline int PipelinesInfo::pipelines_size() const {
  return pipelines_.size();
}
inline void PipelinesInfo::clear_pipelines() {
  pipelines_.Clear();
}
inline const ::Lmm::Pipeline& PipelinesInfo::pipelines(int index) const {
  // @@protoc_insertion_point(field_get:Lmm.PipelinesInfo.pipelines)
  return pipelines_.Get(index);
}
inline ::Lmm::Pipeline* PipelinesInfo::mutable_pipelines(int index) {
  // @@protoc_insertion_point(field_mutable:Lmm.PipelinesInfo.pipelines)
  return pipelines_.Mutable(index);
}
inline ::Lmm::Pipeline* PipelinesInfo::add_pipelines() {
  // @@protoc_insertion_point(field_add:Lmm.PipelinesInfo.pipelines)
  return pipelines_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Lmm::Pipeline >*
PipelinesInfo::mutable_pipelines() {
  // @@protoc_insertion_point(field_mutable_list:Lmm.PipelinesInfo.pipelines)
  return &pipelines_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Lmm::Pipeline >&
PipelinesInfo::pipelines() const {
  // @@protoc_insertion_point(field_list:Lmm.PipelinesInfo.pipelines)
  return pipelines_;
}

// -------------------------------------------------------------------

// Pipeline

// string name = 1;
inline void Pipeline::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pipeline::name() const {
  // @@protoc_insertion_point(field_get:Lmm.Pipeline.name)
  return name_.GetNoArena();
}
inline void Pipeline::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Lmm.Pipeline.name)
}
#if LANG_CXX11
inline void Pipeline::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Lmm.Pipeline.name)
}
#endif
inline void Pipeline::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Lmm.Pipeline.name)
}
inline void Pipeline::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Lmm.Pipeline.name)
}
inline ::std::string* Pipeline::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Lmm.Pipeline.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pipeline::release_name() {
  // @@protoc_insertion_point(field_release:Lmm.Pipeline.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pipeline::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Lmm.Pipeline.name)
}

// repeated .Lmm.Element elements = 2;
inline int Pipeline::elements_size() const {
  return elements_.size();
}
inline void Pipeline::clear_elements() {
  elements_.Clear();
}
inline const ::Lmm::Element& Pipeline::elements(int index) const {
  // @@protoc_insertion_point(field_get:Lmm.Pipeline.elements)
  return elements_.Get(index);
}
inline ::Lmm::Element* Pipeline::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:Lmm.Pipeline.elements)
  return elements_.Mutable(index);
}
inline ::Lmm::Element* Pipeline::add_elements() {
  // @@protoc_insertion_point(field_add:Lmm.Pipeline.elements)
  return elements_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Lmm::Element >*
Pipeline::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:Lmm.Pipeline.elements)
  return &elements_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Lmm::Element >&
Pipeline::elements() const {
  // @@protoc_insertion_point(field_list:Lmm.Pipeline.elements)
  return elements_;
}

// -------------------------------------------------------------------

// Element

// string name = 1;
inline void Element::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Element::name() const {
  // @@protoc_insertion_point(field_get:Lmm.Element.name)
  return name_.GetNoArena();
}
inline void Element::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Lmm.Element.name)
}
#if LANG_CXX11
inline void Element::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Lmm.Element.name)
}
#endif
inline void Element::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Lmm.Element.name)
}
inline void Element::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Lmm.Element.name)
}
inline ::std::string* Element::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Lmm.Element.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Element::release_name() {
  // @@protoc_insertion_point(field_release:Lmm.Element.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Element::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Lmm.Element.name)
}

// repeated .Lmm.QueueInfo outq = 2;
inline int Element::outq_size() const {
  return outq_.size();
}
inline void Element::clear_outq() {
  outq_.Clear();
}
inline const ::Lmm::QueueInfo& Element::outq(int index) const {
  // @@protoc_insertion_point(field_get:Lmm.Element.outq)
  return outq_.Get(index);
}
inline ::Lmm::QueueInfo* Element::mutable_outq(int index) {
  // @@protoc_insertion_point(field_mutable:Lmm.Element.outq)
  return outq_.Mutable(index);
}
inline ::Lmm::QueueInfo* Element::add_outq() {
  // @@protoc_insertion_point(field_add:Lmm.Element.outq)
  return outq_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Lmm::QueueInfo >*
Element::mutable_outq() {
  // @@protoc_insertion_point(field_mutable_list:Lmm.Element.outq)
  return &outq_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Lmm::QueueInfo >&
Element::outq() const {
  // @@protoc_insertion_point(field_list:Lmm.Element.outq)
  return outq_;
}

// repeated .Lmm.QueueInfo inq = 3;
inline int Element::inq_size() const {
  return inq_.size();
}
inline void Element::clear_inq() {
  inq_.Clear();
}
inline const ::Lmm::QueueInfo& Element::inq(int index) const {
  // @@protoc_insertion_point(field_get:Lmm.Element.inq)
  return inq_.Get(index);
}
inline ::Lmm::QueueInfo* Element::mutable_inq(int index) {
  // @@protoc_insertion_point(field_mutable:Lmm.Element.inq)
  return inq_.Mutable(index);
}
inline ::Lmm::QueueInfo* Element::add_inq() {
  // @@protoc_insertion_point(field_add:Lmm.Element.inq)
  return inq_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Lmm::QueueInfo >*
Element::mutable_inq() {
  // @@protoc_insertion_point(field_mutable_list:Lmm.Element.inq)
  return &inq_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Lmm::QueueInfo >&
Element::inq() const {
  // @@protoc_insertion_point(field_list:Lmm.Element.inq)
  return inq_;
}

// -------------------------------------------------------------------

// QueueInfo

// int32 bufferCount = 1;
inline void QueueInfo::clear_buffercount() {
  buffercount_ = 0;
}
inline ::google::protobuf::int32 QueueInfo::buffercount() const {
  // @@protoc_insertion_point(field_get:Lmm.QueueInfo.bufferCount)
  return buffercount_;
}
inline void QueueInfo::set_buffercount(::google::protobuf::int32 value) {
  
  buffercount_ = value;
  // @@protoc_insertion_point(field_set:Lmm.QueueInfo.bufferCount)
}

// float fps = 2;
inline void QueueInfo::clear_fps() {
  fps_ = 0;
}
inline float QueueInfo::fps() const {
  // @@protoc_insertion_point(field_get:Lmm.QueueInfo.fps)
  return fps_;
}
inline void QueueInfo::set_fps(float value) {
  
  fps_ = value;
  // @@protoc_insertion_point(field_set:Lmm.QueueInfo.fps)
}

// int64 elapsedSinceLastAdd = 3;
inline void QueueInfo::clear_elapsedsincelastadd() {
  elapsedsincelastadd_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 QueueInfo::elapsedsincelastadd() const {
  // @@protoc_insertion_point(field_get:Lmm.QueueInfo.elapsedSinceLastAdd)
  return elapsedsincelastadd_;
}
inline void QueueInfo::set_elapsedsincelastadd(::google::protobuf::int64 value) {
  
  elapsedsincelastadd_ = value;
  // @@protoc_insertion_point(field_set:Lmm.QueueInfo.elapsedSinceLastAdd)
}

// int32 receivedCount = 4;
inline void QueueInfo::clear_receivedcount() {
  receivedcount_ = 0;
}
inline ::google::protobuf::int32 QueueInfo::receivedcount() const {
  // @@protoc_insertion_point(field_get:Lmm.QueueInfo.receivedCount)
  return receivedcount_;
}
inline void QueueInfo::set_receivedcount(::google::protobuf::int32 value) {
  
  receivedcount_ = value;
  // @@protoc_insertion_point(field_set:Lmm.QueueInfo.receivedCount)
}

// int32 sentCount = 5;
inline void QueueInfo::clear_sentcount() {
  sentcount_ = 0;
}
inline ::google::protobuf::int32 QueueInfo::sentcount() const {
  // @@protoc_insertion_point(field_get:Lmm.QueueInfo.sentCount)
  return sentcount_;
}
inline void QueueInfo::set_sentcount(::google::protobuf::int32 value) {
  
  sentcount_ = value;
  // @@protoc_insertion_point(field_set:Lmm.QueueInfo.sentCount)
}

// int64 totalSize = 6;
inline void QueueInfo::clear_totalsize() {
  totalsize_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 QueueInfo::totalsize() const {
  // @@protoc_insertion_point(field_get:Lmm.QueueInfo.totalSize)
  return totalsize_;
}
inline void QueueInfo::set_totalsize(::google::protobuf::int64 value) {
  
  totalsize_ = value;
  // @@protoc_insertion_point(field_set:Lmm.QueueInfo.totalSize)
}

// int32 bitrate = 7;
inline void QueueInfo::clear_bitrate() {
  bitrate_ = 0;
}
inline ::google::protobuf::int32 QueueInfo::bitrate() const {
  // @@protoc_insertion_point(field_get:Lmm.QueueInfo.bitrate)
  return bitrate_;
}
inline void QueueInfo::set_bitrate(::google::protobuf::int32 value) {
  
  bitrate_ = value;
  // @@protoc_insertion_point(field_set:Lmm.QueueInfo.bitrate)
}

// .Lmm.QueueInfo.RateLimit rateLimit = 8;
inline void QueueInfo::clear_ratelimit() {
  ratelimit_ = 0;
}
inline ::Lmm::QueueInfo_RateLimit QueueInfo::ratelimit() const {
  // @@protoc_insertion_point(field_get:Lmm.QueueInfo.rateLimit)
  return static_cast< ::Lmm::QueueInfo_RateLimit >(ratelimit_);
}
inline void QueueInfo::set_ratelimit(::Lmm::QueueInfo_RateLimit value) {
  
  ratelimit_ = value;
  // @@protoc_insertion_point(field_set:Lmm.QueueInfo.rateLimit)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Lmm

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Lmm::QueueInfo_RateLimit> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Lmm::QueueInfo_RateLimit>() {
  return ::Lmm::QueueInfo_RateLimit_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pipeline_2eproto__INCLUDED
