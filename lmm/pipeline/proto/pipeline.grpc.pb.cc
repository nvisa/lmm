// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: pipeline.proto

#include "pipeline.pb.h"
#include "pipeline.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace Lmm {

static const char* PipelineService_method_names[] = {
  "/Lmm.PipelineService/GetInfo",
  "/Lmm.PipelineService/GetQueueInfo",
};

std::unique_ptr< PipelineService::Stub> PipelineService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PipelineService::Stub> stub(new PipelineService::Stub(channel));
  return stub;
}

PipelineService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetInfo_(PipelineService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetQueueInfo_(PipelineService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status PipelineService::Stub::GetInfo(::grpc::ClientContext* context, const ::Lmm::GenericQ& request, ::Lmm::PipelinesInfo* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetInfo_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::Lmm::PipelinesInfo>* PipelineService::Stub::AsyncGetInfoRaw(::grpc::ClientContext* context, const ::Lmm::GenericQ& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Lmm::PipelinesInfo>::Create(channel_.get(), cq, rpcmethod_GetInfo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Lmm::PipelinesInfo>* PipelineService::Stub::PrepareAsyncGetInfoRaw(::grpc::ClientContext* context, const ::Lmm::GenericQ& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Lmm::PipelinesInfo>::Create(channel_.get(), cq, rpcmethod_GetInfo_, context, request, false);
}

::grpc::Status PipelineService::Stub::GetQueueInfo(::grpc::ClientContext* context, const ::Lmm::QueueInfoQ& request, ::Lmm::QueueInfo* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetQueueInfo_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::Lmm::QueueInfo>* PipelineService::Stub::AsyncGetQueueInfoRaw(::grpc::ClientContext* context, const ::Lmm::QueueInfoQ& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Lmm::QueueInfo>::Create(channel_.get(), cq, rpcmethod_GetQueueInfo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Lmm::QueueInfo>* PipelineService::Stub::PrepareAsyncGetQueueInfoRaw(::grpc::ClientContext* context, const ::Lmm::QueueInfoQ& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Lmm::QueueInfo>::Create(channel_.get(), cq, rpcmethod_GetQueueInfo_, context, request, false);
}

PipelineService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PipelineService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PipelineService::Service, ::Lmm::GenericQ, ::Lmm::PipelinesInfo>(
          std::mem_fn(&PipelineService::Service::GetInfo), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PipelineService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PipelineService::Service, ::Lmm::QueueInfoQ, ::Lmm::QueueInfo>(
          std::mem_fn(&PipelineService::Service::GetQueueInfo), this)));
}

PipelineService::Service::~Service() {
}

::grpc::Status PipelineService::Service::GetInfo(::grpc::ServerContext* context, const ::Lmm::GenericQ* request, ::Lmm::PipelinesInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PipelineService::Service::GetQueueInfo(::grpc::ServerContext* context, const ::Lmm::QueueInfoQ* request, ::Lmm::QueueInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace Lmm

